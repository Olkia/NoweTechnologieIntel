#include "opencv2/opencv.hpp"
#include "raspicam/raspicam_cv.h"
#include <opencv2/core/core.hpp>
#include "opencv2/highgui.hpp"


using namespace std;
using namespace cv;

CascadeClassifier face_cascade;
String window_name = "Face Detection";

void detectFaces(Mat frame) {

  std::vector<Rect> faces;
  Mat frame_gray;
  cvtColor(frame, frame_gray, COLOR_BGR2GRAY); 
  equalizeHist(frame_gray, frame_gray);   


  face_cascade.detectMultiScale(frame_gray, faces, 1.1, 3,
				0|CASCADE_SCALE_IMAGE, Size(30, 30));

 
  for( size_t i = 0; i < faces.size(); i++ ) {

    Point center(faces[i].x + faces[i].width/2, faces[i].y + faces[i].height/2);

    ellipse(frame, center, Size(faces[i].width/2, faces[i].height/2),
	    0, 0, 360, Scalar( 255, 0, 255 ), 4, 8, 0 );
  }

  imshow(window_name, frame);
}

int main() {
  
  VideoCapture cap("/home/pi/Downloads/3.mp4");   
  Mat frame;
  face_cascade.load("/home/pi/Downloads/opencv/data/haarcascades/haarcascade_frontalface_alt.xml");
  
  while(cap.read(frame)) {
    detectFaces(frame);
    if( waitKey(30) >= 0)
    	break; 
  }
  return 0;
}
